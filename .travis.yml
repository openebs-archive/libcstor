language: c
sudo: required
branches:
  only:
    - master
    - /^\d+\.\d+(\.\d+)?(-\S*)?$/
    - /^v\d+\.\d+(\.\S*)?$/
env:
  global:
    # Travis limits maximum log size, we have to cut tests output
    - CSTOR_TEST_TRAVIS_LOG_MAX_LENGTH=800
jobs:
  include:
    - os: linux
      arch: amd64
      env:
        - RUN_UZFS_TESTS=1
        - RELEASE_TAG_DOWNSTREAM=1
    - os: linux
      arch: arm64
      env:
        - RUN_UZFS_TESTS=0
        - RELEASE_TAG_DOWNSTREAM=0

before_install:
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    - sudo apt-get update -qq
    - sudo apt-get install --yes -qq gcc-6 g++-6
    - sudo apt-get install --yes -qq build-essential autoconf libtool gawk alien fakeroot libaio-dev jq
    # linux-header package name is different on arm.
    - if [ "$TRAVIS_CPU_ARCH" == "arm64" ]; then
        sudo apt-get install --yes -qq linux-headers-generic;
      else
        sudo apt-get install --yes -qq linux-headers-$(uname -r);
      fi
    - sudo apt-get install --yes -qq zlib1g-dev uuid-dev libattr1-dev libblkid-dev libselinux-dev libudev-dev libssl-dev libjson-c-dev
    - sudo apt-get install --yes -qq lcov libjemalloc-dev
    # packages for tests - only on amd64
    - if [ "$TRAVIS_CPU_ARCH" == "amd64" ]; then
        sudo apt-get install --yes -qq parted lsscsi ksh attr acl nfs-kernel-server;
      fi
    - sudo apt-get install --yes -qq libgtest-dev cmake
    # packages for debugging
    - sudo apt-get install gdb
    # use gcc-6 by default
    - sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-6 /usr/bin/gcc
    - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-6 /usr/bin/g++
install:
    # zrepl will make use of /var/tmp/sock directory to create a sock file.
    - mkdir -p /var/tmp/sock
    - pushd .
    - cd /usr/src/gtest
    - sudo cmake CMakeLists.txt
    - sudo make -j4
    - sudo cp *.a /usr/lib
    - popd
    # save the current location to get back
    - pushd .
    - cd ..
    # we need fio repo to build zfs replica fio engine
    - git clone https://github.com/axboe/fio
    - cd fio
    - git checkout fio-3.9
    - ./configure
    - make -j4
    - cd ..
    - git clone https://github.com/openebs/spl
    - cd spl
    - git checkout spl-0.7.9
    - sh autogen.sh
    - ./configure
    - make -j4
    - cd ..
    # we need cstor headers
    # Get base name of from where we need to download cstor
    - repo_org=${PWD##*/}
    - git clone https://github.com/${repo_org}/cstor.git
    - cd cstor
    - if [ ${TRAVIS_BRANCH} == "master" ]; then git checkout develop; else git checkout ${TRAVIS_BRANCH} || git checkout develop; fi
    - git branch
    # Return to libcstor code base
    - popd
    - sh autogen.sh
    - ./configure --enable-debug --with-zfs-headers=$PWD/../cstor/include --with-spl-headers=$PWD/../cstor/lib/libspl/include
    - make -j4
    - sudo make install
    - sudo ldconfig
    # Return to cstor code
    - cd ..
    - cd cstor
    - sh autogen.sh
    - ./configure --with-config=user  --enable-debug --enable-uzfs=yes --with-jemalloc --with-fio=$PWD/../fio --with-libcstor=$PWD/../libcstor/include
    - make -j4;
    # Return to libcstor code to complie zrepl which contains main process and to run lint checks
    - cd ..
    - cd libcstor
    - make check-license
    - make -f ../cstor/Makefile cstyle CSTORDIR=$PWD/../cstor
    # Go to zrepl directory to build zrepl related targets
    - cd cmd/zrepl
    - make
    - cd ../../
    # back to cstor for running further tests.
    - cd ..
    - cd cstor
script:
    # run ztest and test supported zio backends
    - if [ $RUN_UZFS_TESTS = 1 ]; then
        export FIO_SRCDIR=$PWD/../fio;
        echo $PWD;
        sudo bash ./print_debug_info.sh &
        sudo bash ../libcstor/tests/cstor/script/test_uzfs.sh -T all || travis_terminate 1;
      fi
    # Go back to libcstor to build images
    - cd ../libcstor
    - ./build_image.sh || travis_terminate 1;
    # If this build is running due to travis release tag, then
    # go ahead and tag the dependent repo.
    #  
    # Convert the TRAVIS_TAG to the corresponding release branch.
    # $TRAVIS_BRANCH contains the same value as $TRAVIS_TAG.
    # Example: TRAVIS_TAG and TRAVIS_BRANCH will have v1.9.0-RC1, 
    # when github release tag is v1.9.0-RC1
    # 
    # OpenEBS release are triggered from release branches that are named 
    # as v1.9.x or v1.9.x-hotfix or v1.9.x-custom  
    #
    # The tag to release branch conversion should be handled as follows:
    # v1.9.0-RC1 => should be v1.9.x
    # v1.9.0-hotfixid => should be v1.9.x-hotfixid
    # v1.9.0 => should be v1.9.x
    # v1.9.1 => should be v1.9.x
    # v1.9.0-custom-RC1 => should be v1.9.x-custom
    # v1.9.0-custom => should be v1.9.x-custom
    # v1.9.1-custom => should be v1.9.x-custom
    # 
    # Allow for building forked openebs pipelines. 
    # Tag the downstream repos under current repo org. 
    - if [ -z $REPO_ORG ]; then
        REPO_ORG=$(echo "$TRAVIS_REPO_SLUG" | cut -d'/' -f1);
        export REPO_ORG;
      fi
    - if [ ! -z $TRAVIS_TAG ] && [ "$TRAVIS_REPO_SLUG" == "$REPO_ORG/libcstor" ]; then
        TAG_SUFFIX=$(echo "$TRAVIS_TAG" | cut -d'-' -f2);
        if [ "$TAG_SUFFIX" == "$TRAVIS_TAG" ] || [[ $TAG_SUFFIX =~ ^RC ]]; then 
          REL_SUFFIX="";
        else
          REL_SUFFIX="-$TAG_SUFFIX";
        fi;
        REL_BRANCH=$(echo $(echo "$TRAVIS_TAG" | cut -d'-' -f1 | rev | cut -d'.' -f2- | rev).x$REL_SUFFIX) ;
        ./buildscripts/git-release "$REPO_ORG/istgt" "$TRAVIS_TAG" "$REL_BRANCH" || travis_terminate 1;
      fi
after_failure:
    - find /var/tmp/test_results/current/log -type f -name '*' -printf "%f\n" -exec cut -c -$CSTOR_TEST_TRAVIS_LOG_MAX_LENGTH {} \;
after_success:
    - find /var/tmp/test_results/current/log -type f -name '*' -printf "%f\n" -exec cut -c -$CSTOR_TEST_TRAVIS_LOG_MAX_LENGTH {} \;
notifications:
  email:
    recipients:
    - ashutosh.kumar@mayadata.io
    - kiran.mova@mayadata.io
    - mayank.patel@mayadata.io
    - prateek.pandey@mayadata.io
    - shubham.bajpai@mayadata.io
